{
	"DB_FORMS": {
		"prefix": "DB_FORMS",
		"body": [
			"from flask_wtf import FlaskForm",
			"from wtforms import StringField, PasswordField, IntegerField, SubmitField",
			"from wtforms.validators import DataRequired, Email, Length, EqualTo, NumberRange",
			"",
			"class RegistrationForm(FlaskForm):",
			"    fullname = StringField('Полное имя', validators=[",
			"        DataRequired(),",
			"        Length(min=2, max=100, message='Имя должно быть от 2 до 100 символов')",
			"    ])",
			"    email = StringField('Email', validators=[",
			"        DataRequired(),",
			"        Email(message='Введите корректный email адрес')",
			"    ])",
			"    password = PasswordField('Пароль', validators=[",
			"        DataRequired(),",
			"        Length(min=6, message='Пароль должен быть не менее 6 символов')",
			"    ])",
			"    confirm_password = PasswordField('Подтвердите пароль', validators=[",
			"        DataRequired(),",
			"        EqualTo('password', message='Пароли должны совпадать')",
			"    ])",
			"    submit = SubmitField('Зарегистрироваться')",
			"",
			"class LoginForm(FlaskForm):",
			"    email = StringField('Email', validators=[",
			"        DataRequired(),",
			"        Email(message='Введите корректный email адрес')",
			"    ])",
			"    password = PasswordField('Пароль', validators=[",
			"        DataRequired()",
			"    ])",
			"    submit = SubmitField('Войти')",
			"",
			"class CarForm(FlaskForm):",
			"    model = StringField('Модель', validators=[",
			"        DataRequired(),",
			"        Length(min=2, max=100, message='Название модели должно быть от 2 до 100 символов')",
			"    ])",
			"    capacity = IntegerField('Вместимость', validators=[",
			"        DataRequired(),",
			"        NumberRange(min=1, max=10, message='Вместимость должна быть от 1 до 10 человек')",
			"    ])",
			"    year = IntegerField('Год выпуска', validators=[",
			"        DataRequired(),",
			"        NumberRange(min=1900, max=2024, message='Год выпуска должен быть от 1900 до 2024')",
			"    ])",
			"    make = StringField('Марка', validators=[",
			"        DataRequired(),",
			"        Length(min=2, max=100, message='Название марки должно быть от 2 до 100 символов')",
			"    ])",
			"    submit = SubmitField('Сохранить')"
		],
		"description": "Flask-WTF Forms definitions."
	},
	"DB_MODELS": {
		"prefix": "DB_MODELS",
		"body": [
			"from werkzeug.security import generate_password_hash, check_password_hash",
			"import mysql.connector",
			"from flask_login import UserMixin",
			"",
			"class User(UserMixin):",
			"    def __init__(self, id, fullname, email, password=None):",
			"        self.id = id",
			"        self.fullname = fullname",
			"        self.email = email",
			"        self.password = password",
			"",
			"    # UserMixin предоставляет is_active, is_authenticated, is_anonymous и get_id()",
			"    # Если у вашего пользователя есть поле 'id', get_id() будет работать автоматически.",
			"",
			"    @staticmethod",
			"    def get_by_id(conn, user_id):",
			"        cur = conn.cursor()",
			"        try:",
			"            cur.execute('SELECT id, fullname, email, password FROM users WHERE id = %s', (user_id,))",
			"            user = cur.fetchone()",
			"            if user:",
			"                return User(user[0], user[1], user[2], user[3])",
			"            return None",
			"        finally:",
			"            cur.close()",
			"",
			"    @staticmethod",
			"    def get_by_email(conn, email):",
			"        cur = conn.cursor()",
			"        try:",
			"            cur.execute('SELECT id, fullname, email, password FROM users WHERE email = %s', (email,))",
			"            user = cur.fetchone()",
			"            if user:",
			"                return User(user[0], user[1], user[2], user[3])",
			"            return None",
			"        finally:",
			"            cur.close()",
			"",
			"    @staticmethod",
			"    def create(conn, fullname, email, password):",
			"        hashed_password = generate_password_hash(password)",
			"        cur = conn.cursor()",
			"        try:",
			"            cur.execute('INSERT INTO users (fullname, email, password) VALUES (%s, %s, %s)',",
			"                       (fullname, email, hashed_password))",
			"            conn.commit()",
			"            user_id = cur.lastrowid",
			"            return User(user_id, fullname, email)",
			"        except mysql.connector.Error as err:",
			"            conn.rollback()",
			"            print(f\"Error creating user: {err}\")",
			"            return None",
			"        finally:",
			"            cur.close()",
			"",
			"    def check_password(self, password):",
			"        return check_password_hash(self.password, password)",
			"",
			"class Car:",
			"    def __init__(self, id, model, capacity, year, make):",
			"        self.id = id",
			"        self.model = model",
			"        self.capacity = capacity",
			"        self.year = year",
			"        self.make = make",
			"",
			"    @staticmethod",
			"    def get_all(conn):",
			"        cur = conn.cursor()",
			"        try:",
			"            cur.execute('SELECT id, model, capacity, year, make FROM cars')",
			"            cars_data = cur.fetchall()",
			"            return [Car(car[0], car[1], car[2], car[3], car[4]) for car in cars_data]",
			"        finally:",
			"            cur.close()",
			"",
			"    @staticmethod",
			"    def get_by_id(conn, car_id):",
			"        cur = conn.cursor()",
			"        try:",
			"            cur.execute('SELECT id, model, capacity, year, make FROM cars WHERE id = %s', (car_id,))",
			"            car_data = cur.fetchone()",
			"            if car_data:",
			"                return Car(car_data[0], car_data[1], car_data[2], car_data[3], car_data[4])",
			"            return None",
			"        finally:",
			"            cur.close()",
			"",
			"    @staticmethod",
			"    def create(conn, model, capacity, year, make):",
			"        cur = conn.cursor()",
			"        try:",
			"            cur.execute('INSERT INTO cars (model, capacity, year, make) VALUES (%s, %s, %s, %s)',",
			"                       (model, capacity, year, make))",
			"            conn.commit()",
			"            car_id = cur.lastrowid",
			"            return Car(car_id, model, capacity, year, make)",
			"        except mysql.connector.Error as err:",
			"            conn.rollback()",
			"            print(f\"Error creating car: {err}\")",
			"            return None",
			"        finally:",
			"            cur.close()",
			"",
			"    def update(self, conn, model, capacity, year, make):",
			"        cur = conn.cursor()",
			"        try:",
			"            cur.execute('UPDATE cars SET model = %s, capacity = %s, year = %s, make = %s WHERE id = %s',",
			"                       (model, capacity, year, make, self.id))",
			"            conn.commit()",
			"            self.model = model",
			"            self.capacity = capacity",
			"            self.year = year",
			"            self.make = make",
			"        except mysql.connector.Error as err:",
			"            conn.rollback()",
			"            print(f\"Error updating car: {err}\")",
			"        finally:",
			"            cur.close()",
			"",
			"    def delete(self, conn):",
			"        cur = conn.cursor()",
			"        try:",
			"            cur.execute('DELETE FROM cars WHERE id = %s', (self.id,))",
			"            conn.commit()",
			"        except mysql.connector.Error as err:",
			"            conn.rollback()",
			"            print(f\"Error deleting car: {err}\")",
			"        finally:",
			"            cur.close()"
		],
		"description": "Database Models for Users and Cars."
	},
	"DB_APP": {
		"prefix": "DB_APP",
		"body": [
			"from flask import Flask",
			"from flask_login import LoginManager, UserMixin",
			"from werkzeug.security import generate_password_hash, check_password_hash",
			"import os",
			"import mysql.connector",
			"from routes import init_routes",
			"from models import User",
			"",
			"app = Flask(__name__)",
			"",
			"# Конфигурация",
			"app.config['SECRET_KEY'] = 'your_super_secret_key_here'  # !!! Замените на реальный секретный ключ !!!",
			"app.config['MYSQL_HOST'] = 'localhost'",
			"app.config['MYSQL_USER'] = 'root'  # Замените на вашего пользователя",
			"app.config['MYSQL_PASSWORD'] = ''  # Замените на ваш пароль",
			"app.config['MYSQL_DB'] = 'car_management'",
			"",
			"# Инициализация LoginManager",
			"login_manager = LoginManager()",
			"login_manager.init_app(app)",
			"login_manager.login_view = 'auth'",
			"",
			"# Функция для получения подключения к базе данных",
			"def get_db_connection():",
			"    return mysql.connector.connect(",
			"        host=app.config['MYSQL_HOST'],",
			"        user=app.config['MYSQL_USER'],",
			"        password=app.config['MYSQL_PASSWORD'],",
			"        database=app.config['MYSQL_DB']",
			"    )",
			"",
			"@login_manager.user_loader",
			"def load_user(user_id):",
			"    # Убедимся, что контекст приложения активен",
			"    with app.app_context():",
			"        conn = get_db_connection()",
			"        user = User.get_by_id(conn, user_id)",
			"        conn.close()",
			"        return user",
			"",
			"# Инициализация маршрутов",
			"init_routes(app, get_db_connection)",
			"",
			"if __name__ == '__main__':",
			"    # Убедимся, что контекст приложения активен при первом запуске",
			"    with app.app_context():",
			"        app.run(debug=True)"
		],
		"description": "Main Flask application file with database connection setup."
	},
	"DB_ROUTES": {
		"prefix": "DB_ROUTES",
		"body": [
			"from flask import render_template, request, redirect, url_for, flash",
			"from flask_login import login_user, login_required, logout_user, current_user",
			"from werkzeug.security import generate_password_hash, check_password_hash",
			"from models import User, Car",
			"from forms import RegistrationForm, LoginForm, CarForm",
			"",
			"def init_routes(app, get_db_connection):",
			"    @app.route('/')",
			"    def index():",
			"        return render_template('index.html')",
			"",
			"    @app.route('/auth', methods=['GET', 'POST'])",
			"    def auth():",
			"        if request.method == 'POST':",
			"            if 'register' in request.form:",
			"                # Обработка регистрации",
			"                fullname = request.form['fullname']",
			"                email = request.form['email']",
			"                password = request.form['password']",
			"                confirm_password = request.form['confirm_password']",
			"",
			"                if password != confirm_password:",
			"                    flash('Пароли не совпадают', 'danger')",
			"                    return redirect(url_for('auth'))",
			"                ",
			"                conn = get_db_connection()",
			"                existing_user = User.get_by_email(conn, email)",
			"                conn.close()",
			"",
			"                if existing_user:",
			"                    flash('Email уже зарегистрирован', 'danger')",
			"                    return redirect(url_for('auth'))",
			"                ",
			"                conn = get_db_connection()",
			"                user = User.create(conn, fullname, email, password)",
			"                conn.close()",
			"",
			"                flash('Регистрация успешна! Теперь вы можете войти.', 'success')",
			"                return redirect(url_for('auth'))",
			"",
			"            elif 'login' in request.form:",
			"                # Обработка входа",
			"                email = request.form['email']",
			"                password = request.form['password']",
			"",
			"                conn = get_db_connection()",
			"                user = User.get_by_email(conn, email)",
			"                conn.close()",
			"",
			"                if user and user.check_password(password):",
			"                    login_user(user)",
			"                    flash('Вход выполнен успешно!', 'success')",
			"                    return redirect(url_for('index'))",
			"                else:",
			"                    flash('Неверный email или пароль', 'danger')",
			"                    return redirect(url_for('auth'))",
			"",
			"        return render_template('auth.html')",
			"",
			"    @app.route('/logout')",
			"    @login_required",
			"    def logout():",
			"        logout_user()",
			"        flash('Вы вышли из системы', 'success')",
			"        return redirect(url_for('index'))",
			"",
			"    @app.route('/cars')",
			"    @login_required",
			"    def cars():",
			"        conn = get_db_connection()",
			"        cars = Car.get_all(conn)",
			"        conn.close()",
			"        return render_template('cars.html', items=cars)",
			"",
			"    @app.route('/cars/add', methods=['GET', 'POST'])",
			"    @login_required",
			"    def add_car():",
			"        form = CarForm()",
			"        if form.validate_on_submit():",
			"            conn = get_db_connection()",
			"            car = Car.create(",
			"                conn,",
			"                form.model.data,",
			"                form.capacity.data,",
			"                form.year.data,",
			"                form.make.data",
			"            )",
			"            conn.close()",
			"            flash('Автомобиль успешно добавлен!', 'success')",
			"            return redirect(url_for('cars'))",
			"        return render_template('car_form.html', form=form, title='Добавить автомобиль')",
			"",
			"    @app.route('/cars/edit/<int:car_id>', methods=['GET', 'POST'])",
			"    @login_required",
			"    def edit_car(car_id):",
			"        conn = get_db_connection()",
			"        car = Car.get_by_id(conn, car_id)",
			"        conn.close()",
			"",
			"        if not car:",
			"            flash('Автомобиль не найден', 'danger')",
			"            return redirect(url_for('cars'))",
			"",
			"        form = CarForm(obj=car)",
			"        if form.validate_on_submit():",
			"            conn = get_db_connection()",
			"            car.update(",
			"                conn,",
			"                form.model.data,",
			"                form.capacity.data,",
			"                form.year.data,",
			"                form.make.data",
			"            )",
			"            conn.close()",
			"            flash('Автомобиль успешно обновлен!', 'success')",
			"            return redirect(url_for('cars'))",
			"        return render_template('car_form.html', form=form, title='Редактировать автомобиль')",
			"",
			"    @app.route('/cars/delete/<int:car_id>')",
			"    @login_required",
			"    def delete_car(car_id):",
			"        conn = get_db_connection()",
			"        car = Car.get_by_id(conn, car_id)",
			"        ",
			"        if car:",
			"            car.delete(conn)",
			"            conn.close()",
			"            flash('Автомобиль успешно удален!', 'success')",
			"        else:",
			"            conn.close()",
			"            flash('Автомобиль не найден', 'danger')",
			"        return redirect(url_for('cars'))"
		],
		"description": "Flask application routes."
	},
	"DB_START": {
		"prefix": "DB_START",
		"body": [
			"Flask==3.0.2",
			"Flask-Login==0.6.3",
			"Flask-MySQLdb==2.0.0",
			"Flask-WTF==1.2.1",
			"mysqlclient==2.2.4",
			"Werkzeug==3.0.1",
			"WTForms==3.1.2"
		],
		"description": "Project dependencies for Flask application."
	},
    "DB_HTML_AUTH": {
        "prefix": "DB_HTML_AUTH",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"ru\">",
            "<head>",
            "    <meta charset=\"UTF-8\">",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
            "    <title>Авторизация и Регистрация</title>",
            "</head>",
            "<body>",
            "    <h1>Авторизация и Регистрация</h1>",
            "    ",
            "    {% with messages = get_flashed_messages(with_categories=true) %}",
            "        {% if messages %}",
            "            {% for category, message in messages %}",
            "                <div>{{ message }}</div>",
            "            {% endfor %}",
            "        {% endif %}",
            "    {% endwith %}",
            "",
            "    <div>",
            "        <h2>Регистрация</h2>",
            "        <form method=\"POST\">",
            "            <div>",
            "                <label for=\"fullname\">Полное имя:</label>",
            "                <input type=\"text\" id=\"fullname\" name=\"fullname\" value=\"{{ request.form.get('fullname', '') }}\">",
            "            </div>",
            "            <div>",
            "                <label for=\"reg_email\">Email:</label>",
            "                <input type=\"email\" id=\"reg_email\" name=\"email\" value=\"{{ request.form.get('email', '') }}\">",
            "            </div>",
            "            <div>",
            "                <label for=\"reg_password\">Пароль:</label>",
            "                <input type=\"password\" id=\"reg_password\" name=\"password\">",
            "            </div>",
            "            <div>",
            "                <label for=\"confirm_password\">Подтвердите пароль:</label>",
            "                <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\">",
            "            </div>",
            "            <input type=\"submit\" value=\"Зарегистрироваться\" name=\"register\">",
            "        </form>",
            "    </div>",
            "",
            "    <div>",
            "        <h2>Вход</h2>",
            "        <form method=\"POST\">",
            "            <div>",
            "                <label for=\"login_email\">Email:</label>",
            "                <input type=\"email\" id=\"login_email\" name=\"email\">",
            "            </div>",
            "            <div>",
            "                <label for=\"login_password\">Пароль:</label>",
            "                <input type=\"password\" id=\"login_password\" name=\"password\">",
            "            </div>",
            "            <input type=\"submit\" value=\"Войти\" name=\"login\">",
            "        </form>",
            "    </div>",
            "</body>",
            "</html>"
        ],
        "description": "HTML template for user authentication (login/registration)."
    },
    "DB_HTML_CARS": {
        "prefix": "DB_HTML_CARS",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"ru\">",
            "<head>",
            "    <meta charset=\"UTF-8\">",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
            "    <title>Список автомобилей</title>",
            "</head>",
            "<body>",
            "    <h1>Список автомобилей</h1>",
            "    ",
            "    {% if items %}",
            "        <table border=\"1\">",
            "            <thead>",
            "                <tr>",
            "                    <th>ID</th>",
            "                    <th>Модель</th>",
            "                    <th>Вместимость</th>",
            "                    <th>Год выпуска</th>",
            "                    <th>Марка</th>",
            "                </tr>",
            "            </thead>",
            "            <tbody>",
            "                {% for item in items %}",
            "                    <tr>",
            "                        <td>{{ item[0] if item is iterable else item.id }}</td>",
            "                        <td>{{ item[1] if item is iterable else item.model }}</td>",
            "                        <td>{{ item[2] if item is iterable else item.capacity }}</td>",
            "                        <td>{{ item[3] if item is iterable else item.year }}</td>",
            "                        <td>{{ item[4] if item is iterable else item.make }}</td>",
            "                    </tr>",
            "                {% endfor %}",
            "            </tbody>",
            "        </table>",
            "    {% else %}",
            "        <p>Данные отсутствуют.</p>",
            "    {% endif %}",
            "",
            "    <p><a href=\"{{ url_for('index') }}\">На главную</a></p>",
            "</body>",
            "</html>"
        ],
        "description": "HTML template to display a list of cars."
    },
    "DB_HTML_CAR_FORM": {
        "prefix": "DB_HTML_CAR_FORM",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"ru\">",
            "<head>",
            "    <meta charset=\"UTF-8\">",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
            "    <title>{{ title }}</title>",
            "</head>",
            "<body>",
            "    <h1>{{ title }}</h1>",
            "    ",
            "    <form method=\"POST\">",
            "        {{ form.csrf_token }}",
            "        ",
            "        <div>",
            "            {{ form.model.label }}",
            "            {{ form.model }}",
            "            {% if form.model.errors %}",
            "                {% for error in form.model.errors %}",
            "                    <div>{{ error }}</div>",
            "                {% endfor %}",
            "            {% endif %}",
            "        </div>",
            "",
            "        <div>",
            "            {{ form.capacity.label }}",
            "            {{ form.capacity }}",
            "            {% if form.capacity.errors %}",
            "                {% for error in form.capacity.errors %}",
            "                    <div>{{ error }}</div>",
            "                {% endfor %}",
            "            {% endif %}",
            "        </div>",
            "",
            "        <div>",
            "            {{ form.year.label }}",
            "            {{ form.year }}",
            "            {% if form.year.errors %}",
            "                {% for error in form.year.errors %}",
            "                    <div>{{ error }}</div>",
            "                {% endfor %}",
            "            {% endif %}",
            "        </div>",
            "",
            "        <div>",
            "            {{ form.make.label }}",
            "            {{ form.make }}",
            "            {% if form.make.errors %}",
            "                {% for error in form.make.errors %}",
            "                    <div>{{ error }}</div>",
            "                {% endfor %}",
            "            {% endif %}",
            "        </div>",
            "",
            "        {{ form.submit }}",
            "    </form>",
            "",
            "    <p><a href=\"{{ url_for('cars') }}\">Назад к списку автомобилей</a></p>",
            "</body>",
            "</html>"
        ],
        "description": "HTML template for adding or editing a car."
    },
    "DB_HTML_INDEX": {
        "prefix": "DB_HTML_INDEX",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"ru\">",
            "<head>",
            "    <meta charset=\"UTF-8\">",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
            "    <title>Главная страница</title>",
            "</head>",
            "<body>",
            "    <h1>Добро пожаловать!</h1>",
            "    ",
            "    <div>",
            "        <p>Это главная страница вашего Flask приложения.</p>",
            "    </div>",
            "    ",
            "    <p><a href=\"{{ url_for('auth') }}\">Войти или Зарегистрироваться</a></p>",
            "",
            "    {% if current_user.is_authenticated %}",
            "        <p>Привет, {{ current_user.fullname }}!</p>",
            "        <p><a href=\"{{ url_for('logout') }}\">Выйти</a></p>",
            "    {% endif %}",
            "</body>",
            "</html>"
        ],
        "description": "HTML template for the main index page."
    }
    ,
    "DB_ZAPROS": {
		"prefix": "DB_ZAPROS",
		"body": [
			"SELECT",
			"    c.model, -- Модель автомобиля",
			"    COALESCE(SUM(g.quantity), 0) AS total_cargo, -- Общее количество груза для автомобиля (0 если груза нет)",
			"    c.capacity, -- Общая вместительность автомобиля",
			"    (COALESCE(SUM(g.quantity), 0) / c.capacity) * 100 AS load_percentage -- Процент загрузки",
			"FROM",
			"    cars c",
			"LEFT JOIN",
			"    cargo g ON c.id = g.car_id -- Используем LEFT JOIN, чтобы включить автомобили без груза",
			"GROUP BY",
			"    c.id, c.model, c.capacity;"
		],
		"description": "SQL query to calculate the cargo load percentage for each car."
	}
    
}